[
    {
        "id":1,
        "nom":"Java Flamework",
        "syntax":{
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":{
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":{
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"flamework_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/web/pages/layout/layout.jsp",
            "[projectNameMaj]/web/pages/login.jsp",
            "[projectNameMaj]/web/WEB-INF/web.xml",
            "[projectNameMaj]/web/index.jsp",
            "[projectNameMaj]/execute.bat",
            "[projectNameMaj]/src/controller/HelloController.java",
            "[projectNameMaj]/src/controller/LoginController.java"
        ],
        "additionnalFiles":[],
        "model":{
            "modelImports":[
                "import veda.godao.annotations.Column;",
                "import veda.godao.annotations.Table;",
                "import veda.godao.annotations.PrimaryKey;"
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "@Table(\"[tableName]\")"
            ],
            "modelPrimaryFieldAnnotations":[
                "@PrimaryKey"
            ],
            "modelForeignFieldAnnotations":[
                "@veda.godao.annotations.ForeignKey(recursive=true)"
            ],
            "modelFieldAnnotations":[
                "@Column(\"[columnName]\")"
            ],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [fieldName[modelFieldCase]];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [fieldName[modelFieldCase]]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [fieldName[modelFieldCase]]=o; }",
            "modelConstructors":[
                "public [classNameMaj](){}",
                "public [classNameMaj]([primaryFieldType] o){ [primaryFieldName[modelFieldCase]]=o; }"
            ],
            "modelSavePath":"[projectNameMaj]/src/[projectNameMin]/entities",
            "modelAdditionnalFiles":[],
            "modelExtension":"java",
            "modelPackage":"[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "import eriq.flamework.annotations.Controller;",
                "import eriq.flamework.annotations.Singleton;",
                "import eriq.flamework.annotations.URLMapping;",
                "import eriq.flamework.model.ModelRedirect;",
                "import eriq.flamework.model.ModelView;",
                "import eriq.flamework.model.ModelMethod;",
                "import eriq.flamework.servlet.ServletEntity;",
                "import veda.godao.DAO;",
                "import veda.godao.utils.DAOConnexion;",
                "import java.sql.Connection;",
                "import [projectNameMin].entities.[classNameMaj];",
                "import config.Constantes;",
                "import java.net.URLEncoder;",
                "import java.net.URLDecoder;",
                "import java.nio.charset.StandardCharsets;",
                "import java.util.Base64;"
            ],
            "controllerAnnotations":[
                "@Controller",
                "@Singleton"
            ],
            "controllerExtends":"",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[],
                    "controllerFieldContent":"private DAO dao=new DAO(\"[databaseName]\", \"[databaseHost]\", \"[databasePort]\", \"[user]\", \"[pwd]\", [databaseUseSSL], [databaseID]);"
                }
            ],
            "controllerChangeInstanciation":{
                "template":"o.set[fieldNameMaj]([content]);",
                "value":"entity.getData().get(\"[fieldNameMin]\")"
            },
            "controllerWhereInstanciation":{
                "template":"where.set[primaryNameMaj]([content]);",
                "value":"entity.getData().get(\"[primaryNameMin]\")"
            },
            "controllerForeignInstanciation":{
                "template":"o.set[fieldNameMaj](new [projectNameMin].entities.[foreignType]([content]));",
                "value":"entity.getData().get(\"[fieldNameMin]\")"
            },
            "controllerForeignList":"[projectNameMin].entities.[foreignType][] [foreignNameMin]=dao.select(connex, [projectNameMin].entities.[foreignType].class);\nmodel.addItem(\"[foreignNameMin]s\", [foreignNameMin]);",
            "controllerForeignContextParam" : "",
            "controllerForeignContextInstanciation" : "",
            "controllerConstructors":[],
            "controllerForeignInclude":"",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[
                        "@URLMapping(\"insert[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"flamework/controller/flameworkControllerInsert"
                },
                {
                    "controllerMethodAnnotations":[
                        "@URLMapping(\"tocrud[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"flamework/controller/flameworkControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "@URLMapping(\"update[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"flamework/controller/flameworkControllerUpdate"
                },
                {
                    "controllerMethodAnnotations":[
                        "@URLMapping(\"delete[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"flamework/controller/flameworkControllerDelete"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/src/[projectNameMin]/controllers",
            "controllerExtension":"java",
            "controllerPackage":"[projectNameMin].controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"[foreignType][] [foreignNameMin]=([foreignType][])request.getAttribute(\"[foreignNameMin]s\");",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".getLabel()",
            "viewTableLine":"<td><%= o.get[fieldNameMaj]()[foreignFieldGet] %></td>",
            "viewUpdateFormForeignField":"flamework/view/components/flameworkViewUpdateForeign",
            "viewUpdateFormField":{
                "Integer":"flamework/view/components/flameworkViewUpdateInt",
                "Double":"flamework/view/components/flameworkViewUpdateDouble",
                "String":"flamework/view/components/flameworkViewUpdateString",
                "java.time.LocalDate":"flamework/view/components/flameworkViewUpdateDate",
                "java.time.LocalDateTime":"flamework/view/components/flameworkViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"flamework/view/components/flameworkViewInsertForeign",
            "viewInsertFormField":{
                "Integer":"flamework/view/components/flameworkViewInsertInt",
                "Double":"flamework/view/components/flameworkViewInsertDouble",
                "String":"flamework/view/components/flameworkViewInsertString",
                "java.time.LocalDate":"flamework/view/components/flameworkViewInsertDate",
                "java.time.LocalDateTime":"flamework/view/components/flameworkViewInsertTimestamp"
            },
            "viewName":"[classNameMin]",
            "viewContent":"flamework/view/flameworkView",
            "viewSavePath":"[projectNameMaj]/web/pages",
            "viewExtension":"jsp",
            "viewCommentStart":"<!-- ",
            "viewCommentEnd":" -->"
        },
        "customChanges":[],
        "navbarLinks":{
            "path":"[projectNameMaj]/web/pages/layout/layout.jsp",
            "link":"<a href=\"/[projectNameMaj]/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    },
    {
        "id":2,
        "nom":"Spring with PostgreSQL",
        "syntax":{
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":{
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":{
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"springpsql_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/settings.gradle",
            "[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "[projectNameMaj]/src/main/resources/templates/login.html",
            "[projectNameMaj]/src/main/resources/application.properties",
            "[projectNameMaj]/src/main/java/com/controllers/LoginController.java",
            "[projectNameMaj]/src/main/java/com/controllers/HelloController.java"
        ],
        "additionnalFiles":[],
        "model":{
            "modelImports":[
                "import jakarta.persistence.Entity;",
                "import jakarta.persistence.GeneratedValue;",
                "import jakarta.persistence.GenerationType;",
                "import jakarta.persistence.Id;",
                "import veda.godao.annotations.PrimaryKey;",
                "import veda.godao.annotations.Table;"
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "@Entity",
                "@Table(\"[tableName]\")"
            ],
            "modelPrimaryFieldAnnotations":[
                "@Id",
                "@GeneratedValue(strategy=GenerationType.IDENTITY)",
                "@PrimaryKey"
            ],
            "modelForeignFieldAnnotations":[
                "@jakarta.persistence.ManyToOne",
                "@jakarta.persistence.JoinColumn(name=\"[columnName]\")",
                "@veda.godao.annotations.ForeignKey(recursive=true)"
            ],
            "modelFieldAnnotations":[
                "@veda.godao.annotations.Column(\"[columnName]\")"
            ],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [columnName];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [columnName]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [columnName]=o; }",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/entities",
            "modelAdditionnalFiles":[
                {
                    "name":"[classNameMaj]Repository.java",
                    "content":"spring/Repository.templ"
                }
            ],
            "modelExtension":"java",
            "modelPackage":"com.[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "import org.springframework.beans.factory.annotation.Autowired;",
                "import org.springframework.stereotype.Controller;",
                "import org.springframework.ui.Model;",
                "import org.springframework.web.bind.annotation.GetMapping;",
                "import org.springframework.web.bind.annotation.PostMapping;",
                "import org.springframework.web.servlet.view.RedirectView;",
                "import com.[projectNameMin].entities.[classNameMaj];",
                "import com.[projectNameMin].entities.[classNameMaj]Repository;",
                "import com.config.Constantes;",
                "import veda.godao.DAO;",
                "import veda.godao.utils.DAOConnexion;",
                "import jakarta.servlet.http.HttpServletRequest;",
                "import jakarta.servlet.http.HttpSession;",
                "import java.sql.Connection;",
                "import java.sql.SQLException;",
                "import java.net.URLDecoder;",
                "import java.net.URLEncoder;",
                "import java.nio.charset.StandardCharsets;",
                "import java.util.Base64;"
            ],
            "controllerAnnotations":[
                "@Controller"
            ],
            "controllerExtends":"",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[],
                    "controllerFieldContent":"private DAO dao=new DAO(\"[databaseDriver]\", \"[databaseSgbd]\", \"[databaseHost]\", \"[databasePort]\", \"[databaseName]\", \"[user]\", \"[pwd]\", [databaseUseSSL], [databaseAllowKey], [databaseID]);"
                },
                {
                    "controllerFieldAnnotations":[
                        "@Autowired"
                    ],
                    "controllerFieldContent":"private [classNameMaj]Repository repo;"
                }
            ],
            "controllerFieldsForeign":{
                "controllerFieldAnnotations":[
                    "@Autowired"
                ],
                "controllerFieldContent":"private com.[projectNameMin].entities.[foreignNameMaj]Repository repo[foreignNameMaj];"
            },
            "controllerChangeInstanciation":{
                "template":"o.set[fieldNameMaj]([content]);",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"where.set[primaryNameMaj]([content]);",
                "value":"[primaryNameMin]"
            },
            "controllerForeignInstanciation":{
                "template":"o.set[fieldNameMaj](repo[foreignType].findById([content]).orElseThrow());",
                "value":"[fieldNameMin]"
            },
            "controllerForeignList":"model.addAttribute(\"[foreignNameMin]s\", repo[foreignType].findAll());",
            "controllerForeignContextParam" : "",
            "controllerForeignContextInstanciation" : "",
            "controllerConstructors":[],
            "controllerForeignInclude":"",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/insert[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"spring/controller/springControllerInsert"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/tocrud[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/update[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"spring/controller/springControllerUpdate"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/delete[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerDelete"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/controllers",
            "controllerExtension":"java",
            "controllerPackage":"com.[projectNameMin].controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".label",
            "viewTableLine":"<td th:text=\"${e.get[fieldNameMaj]()[foreignFieldGet]}\"></td>",
            "viewUpdateFormForeignField":"spring/view/components/springViewUpdateForeign",
            "viewUpdateFormField":{
                "Integer":"spring/view/components/springViewUpdateInt",
                "Double":"spring/view/components/springViewUpdateDouble",
                "String":"spring/view/components/springViewUpdateString",
                "java.time.LocalDate":"spring/view/components/springViewUpdateDate",
                "java.time.LocalDateTime":"spring/view/components/springViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"spring/view/components/springViewInsertForeign",
            "viewInsertFormField":{
                "Integer":"spring/view/components/springViewInsertInt",
                "Double":"spring/view/components/springViewInsertDouble",
                "String":"spring/view/components/springViewInsertString",
                "java.time.LocalDate":"spring/view/components/springViewInsertDate",
                "java.time.LocalDateTime":"spring/view/components/springViewInsertTimestamp"
            },
            "viewName":"[classNameMin]",
            "viewContent":"spring/view/springView",
            "viewSavePath":"[projectNameMaj]/src/main/resources/templates",
            "viewExtension":"html",
            "viewCommentStart":"<!-- ",
            "viewCommentEnd":" -->"
        },
        "customChanges":[],
        "navbarLinks":{
            "path":"[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "link":"<a href=\"/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    },
    {
        "id":3,
        "nom":"Spring with MySQL",
        "syntax":{
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":{
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":{
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"springmysql_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/settings.gradle",
            "[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "[projectNameMaj]/src/main/resources/application.properties"
        ],
        "additionnalFiles":[],
        "model":{
            "modelImports":[
                "import jakarta.persistence.Entity;",
                "import jakarta.persistence.Column;",
                "import jakarta.persistence.GeneratedValue;",
                "import jakarta.persistence.GenerationType;",
                "import jakarta.persistence.Id;"
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "@Entity"
            ],
            "modelPrimaryFieldAnnotations":[
                "@Id",
                "@GeneratedValue(strategy=GenerationType.IDENTITY)"
            ],
            "modelForeignFieldAnnotations":[
                "@jakarta.persistence.ManyToOne",
                "@jakarta.persistence.JoinColumn(name=\"[columnName]\")"
            ],
            "modelFieldAnnotations":[],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [columnName];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [columnName]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [columnName]=o; }",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/entities",
            "modelAdditionnalFiles":[
                {
                    "name":"[classNameMaj]Repository.java",
                    "content":"spring/Repository.templ"
                }
            ],
            "modelExtension":"java",
            "modelPackage":"com.[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "import org.springframework.beans.factory.annotation.Autowired;",
                "import org.springframework.stereotype.Controller;",
                "import org.springframework.ui.Model;",
                "import org.springframework.web.bind.annotation.GetMapping;",
                "import org.springframework.web.bind.annotation.PostMapping;",
                "import org.springframework.web.servlet.view.RedirectView;",
                "import com.[projectNameMin].entities.[classNameMaj];",
                "import com.[projectNameMin].entities.[classNameMaj]Repository;"
            ],
            "controllerAnnotations":[
                "@Controller"
            ],
            "controllerExtends":"",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[
                        "@Autowired"
                    ],
                    "controllerFieldContent":"private [classNameMaj]Repository repo;"
                }
            ],
            "controllerFieldsForeign":{
                "controllerFieldAnnotations":[
                    "@Autowired"
                ],
                "controllerFieldContent":"private com.[projectNameMin].entities.[foreignNameMaj]Repository repo[foreignNameMaj];"
            },
            "controllerChangeInstanciation":{
                "template":"o.set[fieldNameMaj]([content]);",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"where.set[primaryNameMaj]([content]);",
                "value":"[primaryNameMin]"
            },
            "controllerForeignInstanciation":{
                "template":"o.set[fieldNameMaj](repo[foreignType].findById([content]).orElseThrow());",
                "value":"[fieldNameMin]"
            },
            "controllerForeignList":"model.addAttribute(\"[foreignNameMin]s\", repo[foreignType].findAll());",
            "controllerForeignContextParam" : "",
            "controllerForeignContextInstanciation" : "",
            "controllerConstructors":[],
            "controllerForeignInclude":"",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/insert[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"spring/controller/springControllerInsert"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/tocrud[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/update[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"spring/controller/springControllerUpdate"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/delete[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerDelete"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/controllers",
            "controllerExtension":"java",
            "controllerPackage":"com.[projectNameMin].controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".label",
            "viewTableLine":"<td th:text=\"${e.get[fieldNameMaj]()[foreignFieldGet]}\"></td>",
            "viewUpdateFormForeignField":"spring/view/components/springViewUpdateForeign",
            "viewUpdateFormField":{
                "Integer":"spring/view/components/springViewUpdateInt",
                "Double":"spring/view/components/springViewUpdateDouble",
                "String":"spring/view/components/springViewUpdateString",
                "java.time.LocalDate":"spring/view/components/springViewUpdateDate",
                "java.time.LocalDateTime":"spring/view/components/springViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"spring/view/components/springViewInsertForeign",
            "viewInsertFormField":{
                "Integer":"spring/view/components/springViewInsertInt",
                "Double":"spring/view/components/springViewInsertDouble",
                "String":"spring/view/components/springViewInsertString",
                "java.time.LocalDate":"spring/view/components/springViewInsertDate",
                "java.time.LocalDateTime":"spring/view/components/springViewInsertTimestamp"
            },
            "viewName":"[classNameMin]",
            "viewContent":"spring/view/springView",
            "viewSavePath":"[projectNameMaj]/src/main/resources/templates",
            "viewExtension":"html",
            "viewCommentStart":"<!-- ",
            "viewCommentEnd":" -->"
        },
        "customChanges":[],
        "navbarLinks":{
            "path":"[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "link":"<a href=\"/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    },
    {
        "id":4,
        "nom":"C# NET MVC with EF core and Postgres",
        "syntax":{
            "namespace":"namespace",
            "namespaceStart":"{",
            "namespaceEnd":"}"
        },
        "types":{
            "int":"int",
            "double":"double",
            "string":"string?",
            "date":"DateOnly",
            "timestamp":"DateTime"
        },
        "typeParsers":{
            "int":"int.Parse([value])",
            "double":"Double.Parse([value])",
            "string?":"[value]",
            "DateOnly":"DateOnly.Parse([value])",
            "DateTime":"DateTime.SpecifyKind(DateTime.Parse([value]), DateTimeKind.Utc)"
        },
        "skeleton":"csharppsql_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/Controllers/HomeController.cs",
            "[projectNameMaj]/Models/ErrorViewModel.cs",
            "[projectNameMaj]/Views/Shared/_Layout.cshtml",
            "[projectNameMaj]/Views/_ViewImports.cshtml",
            "[projectNameMaj]/Program.cs",
            "[projectNameMaj]/Config/Constantes.cs"
        ],
        "additionnalFiles":[
            {
                "name":"[projectNameMaj].sln",
                "content":"csharp/data/solution.templ"  
            },
            {
                "name":"[projectNameMaj]/[projectNameMaj].csproj",
                "content":"csharp/data/csproj.templ"  
            }
        ],
        "model":{
            "modelImports":[
                "using System.ComponentModel.DataAnnotations;",
                "using System.ComponentModel.DataAnnotations.Schema;"

            ],
            "modelExtends":"",
            "modelAnnotations":[
                "[Table(\"[tableName]\")]"
            ],
            "modelPrimaryFieldAnnotations":[
                "[Key]"
            ],
            "modelForeignFieldAnnotations":[
                "[ForeignKey(\"[columnName]\")]"
            ],
            "modelFieldAnnotations":[
                "[Column(\"[columnName]\")]"
            ],
            "modelFieldCase":"Maj",
            "modelFieldContent":"public [fieldType] [fieldName[modelFieldCase]]{ get; set; }",
            "modelGetter":"",
            "modelSetter":"",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/Models",
            "modelForeignContextAttr":"public DbSet<[classNameMaj]> [classNameMaj] { get; set; }",
            "modelAdditionnalFiles":[
                {
                    "name" : "[classNameMaj]Context.cs",
                    "content" : "csharp/data/context.templ"
                }
            ],
            "modelExtension":"cs",
            "modelPackage":"[projectNameMaj].Models",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "using Microsoft.AspNetCore.Mvc;",
                "using Microsoft.EntityFrameworkCore;",
                "using [projectNameMaj].Models;",
                "using [projectNameMaj].Config;"
            ],
            "controllerAnnotations":[],
            "controllerExtends":" : Controller",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[],
                    "controllerFieldContent":"private readonly [classNameMaj]Context _context;"
                }
            ],
            "controllerFieldsForeign": {
                "controllerFieldAnnotations":[],
                "controllerFieldContent":"private readonly [foreignNameMaj]Context _context[foreignNameMaj];"
            },
            "controllerChangeInstanciation":{
                "template":"o.[fieldNameMaj]=[content];",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"",
                "value":""
            },
            "controllerForeignInstanciation":{
                "template":"o.[fieldNameMaj]=await _context.[foreignType].FirstOrDefaultAsync(o => o.[referencedFieldNameMaj] == [content]);",
                "value":"[foreignNameMin]"
            },
            "controllerForeignList":"ViewData[\"[foreignNameMin]\"] = await _context[foreignType].[foreignType].ToListAsync();",
            "controllerForeignContextParam" : "[foreignNameMaj]Context context[foreignNameMaj]",
            "controllerForeignContextInstanciation" : "_context[foreignNameMaj] = context[foreignNameMaj];",
            "controllerConstructors":[
                "public [classNameMaj]Controller([classNameMaj]Context context[controllerForeignContextParam]){_context = context; [controllerForeignContextInstanciation]}"
            ],
            "controllerForeignInclude":".Include(e=>e.[foreignNameMaj])",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"csharp/controller/csharpControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "[HttpPost]"
                    ],
                    "controllerMethodParameter":"string [fieldNameMin]",
                    "controllerMethodContent":"csharp/controller/csharpControllerCreate"
                },
                {
                    "controllerMethodAnnotations":[
                        "[HttpPost]"
                    ],
                    "controllerMethodParameter":"string [fieldNameMin]",
                    "controllerMethodContent":"csharp/controller/csharpControllerEdit"
                },
                {
                    "controllerMethodAnnotations":[
                        "[HttpPost]"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"csharp/controller/csharpControllerDelete"
                },
                {
                    "controllerMethodAnnotations":[],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"csharp/controller/csharpControllerExists"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/Controllers",
            "controllerExtension":"cs",
            "controllerPackage":"[projectNameMaj].Controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"var [foreignNameMin]=(List<[foreignNameMaj]>)ViewData[\"[foreignNameMin]\"];",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".Label",
            "viewTableLine":"<td>@o.[fieldNameMaj][foreignFieldGet]</td>",
            "viewUpdateFormForeignField":"csharp/view/components/csharpViewUpdateForeign",
            "viewUpdateFormField":{
                "int":"csharp/view/components/csharpViewUpdateInt",
                "double":"csharp/view/components/csharpViewUpdateDouble",
                "string?":"csharp/view/components/csharpViewUpdateString",
                "DateOnly":"csharp/view/components/csharpViewUpdateDate",
                "DateTime":"csharp/view/components/csharpViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"csharp/view/components/csharpViewInsertForeign",
            "viewInsertFormField":{
                "int":"csharp/view/components/csharpViewInsertInt",
                "double":"csharp/view/components/csharpViewInsertDouble",
                "string?":"csharp/view/components/csharpViewInsertString",
                "DateOnly":"csharp/view/components/csharpViewInsertDate",
                "DateTime":"csharp/view/components/csharpViewInsertTimestamp"
            },
            "viewName":"Index",
            "viewContent":"csharp/view/csharpView",
            "viewSavePath":"[projectNameMaj]/Views/[classNameMaj]",
            "viewExtension":"cshtml",
            "viewCommentStart":"<!-- ",
            "viewCommentEnd":" -->"
        },
        "customChanges":[
            {
                "path":"[projectNameMaj]/appsettings.json",
                "changes":"\"[classNameMaj]Context\": \"server=[databaseHost];username=[user];database=[databaseName];Password=[pwd]\",",
                "withEndComma":false
            },
            {
                "path":"[projectNameMaj]/Program.cs",
                "changes":"builder.Services.AddDbContext<[classNameMaj]Context>(options => options.UseNpgsql(builder.Configuration.GetConnectionString(\"[classNameMaj]Context\") ?? throw new InvalidOperationException(\"Connection string '[classNameMaj]Context' not found.\")));",
                "withEndComma":true
            }
        ],
        "navbarLinks":{
            "path":"[projectNameMaj]/Views/Shared/_Layout.cshtml",
            "link":"<a href=\"/[classNameMaj]\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    },
    {
        "id":5,
        "nom":"C# NET MVC with EF core and Mysql",
        "syntax":{
            "namespace":"namespace",
            "namespaceStart":"{",
            "namespaceEnd":"}"
        },
        "types":{
            "int":"int",
            "double":"double",
            "string":"string?",
            "date":"DateOnly",
            "timestamp":"DateTime"
        },
        "typeParsers":{
            "int":"int.Parse([value])",
            "double":"Double.Parse([value])",
            "string?":"[value]",
            "DateOnly":"DateOnly.Parse([value])",
            "DateTime":"DateTime.SpecifyKind(DateTime.Parse([value]), DateTimeKind.Utc)"
        },
        "skeleton":"csharppsql_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/Controllers/HomeController.cs",
            "[projectNameMaj]/Models/ErrorViewModel.cs",
            "[projectNameMaj]/Views/Shared/_Layout.cshtml",
            "[projectNameMaj]/Views/_ViewImports.cshtml",
            "[projectNameMaj]/Program.cs"
        ],
        "additionnalFiles":[
            {
                "name":"[projectNameMaj].sln",
                "content":"csharp/data/solution.templ"  
            },
            {
                "name":"[projectNameMaj]/[projectNameMaj].csproj",
                "content":"csharp/data/csprojmysql.templ"  
            }
        ],
        "model":{
            "modelImports":[
                "using System.ComponentModel.DataAnnotations;",
                "using System.ComponentModel.DataAnnotations.Schema;"
    
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "[Table(\"[tableName]\")]"
            ],
            "modelPrimaryFieldAnnotations":[
                "[Key]"
            ],
            "modelForeignFieldAnnotations":[
                "[ForeignKey(\"[columnName]\")]"
            ],
            "modelFieldAnnotations":[
                "[Column(\"[columnName]\")]"
            ],
            "modelFieldCase":"Maj",
            "modelFieldContent":"public [fieldType] [fieldName[modelFieldCase]]{ get; set; }",
            "modelGetter":"",
            "modelSetter":"",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/Models",
            "modelForeignContextAttr":"public DbSet<[classNameMaj]> [classNameMaj] { get; set; }",
            "modelAdditionnalFiles":[
                {
                    "name" : "[classNameMaj]Context.cs",
                    "content" : "csharp/data/contextmysql.templ"
                }
            ],
            "modelExtension":"cs",
            "modelPackage":"[projectNameMaj].Models",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "using Microsoft.AspNetCore.Mvc;",
                "using Microsoft.EntityFrameworkCore;",
                "using [projectNameMaj].Models;"
            ],
            "controllerAnnotations":[],
            "controllerExtends":" : Controller",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[],
                    "controllerFieldContent":"private readonly [classNameMaj]Context _context;"
                }
            ],
            "controllerFieldsForeign": {
                "controllerFieldAnnotations":[],
                "controllerFieldContent":"private readonly [foreignNameMaj]Context _context[foreignNameMaj];"
            },
            "controllerChangeInstanciation":{
                "template":"o.[fieldNameMaj]=[content];",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"",
                "value":""
            },
            "controllerForeignInstanciation":{
                "template":"o.[fieldNameMaj]=await _context.[foreignType].FirstOrDefaultAsync(o => o.[referencedFieldNameMaj] == [content]);",
                "value":"[foreignNameMin]"
            },
            "controllerForeignList":"ViewData[\"[foreignNameMin]\"] = await _context[foreignType].[foreignType].ToListAsync();",
            "controllerForeignContextParam" : "[foreignNameMaj]Context context[foreignNameMaj]",
            "controllerForeignContextInstanciation" : "_context[foreignNameMaj] = context[foreignNameMaj];",
            "controllerConstructors":[
                "public [classNameMaj]Controller([classNameMaj]Context context[controllerForeignContextParam]){_context = context; [controllerForeignContextInstanciation]}"
            ],
            "controllerForeignInclude":".Include(e=>e.[foreignNameMaj])",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"csharp/controller/csharpControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "[HttpPost]"
                    ],
                    "controllerMethodParameter":"string [fieldNameMin]",
                    "controllerMethodContent":"csharp/controller/csharpControllerCreate"
                },
                {
                    "controllerMethodAnnotations":[
                        "[HttpPost]"
                    ],
                    "controllerMethodParameter":"string [fieldNameMin]",
                    "controllerMethodContent":"csharp/controller/csharpControllerEdit"
                },
                {
                    "controllerMethodAnnotations":[
                        "[HttpPost]"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"csharp/controller/csharpControllerDelete"
                },
                {
                    "controllerMethodAnnotations":[],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"csharp/controller/csharpControllerExists"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/Controllers",
            "controllerExtension":"cs",
            "controllerPackage":"[projectNameMaj].Controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"var [foreignNameMin]=(List<[foreignNameMaj]>)ViewData[\"[foreignNameMin]\"];",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".Label",
            "viewTableLine":"<td>@o.[fieldNameMaj][foreignFieldGet]</td>",
            "viewUpdateFormForeignField":"csharp/view/components/csharpViewUpdateForeign",
            "viewUpdateFormField":{
                "int":"csharp/view/components/csharpViewUpdateInt",
                "double":"csharp/view/components/csharpViewUpdateDouble",
                "string?":"csharp/view/components/csharpViewUpdateString",
                "DateOnly":"csharp/view/components/csharpViewUpdateDate",
                "DateTime":"csharp/view/components/csharpViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"csharp/view/components/csharpViewInsertForeign",
            "viewInsertFormField":{
                "int":"csharp/view/components/csharpViewInsertInt",
                "double":"csharp/view/components/csharpViewInsertDouble",
                "string?":"csharp/view/components/csharpViewInsertString",
                "DateOnly":"csharp/view/components/csharpViewInsertDate",
                "DateTime":"csharp/view/components/csharpViewInsertTimestamp"
            },
            "viewName":"Index",
            "viewContent":"csharp/view/csharpView",
            "viewSavePath":"[projectNameMaj]/Views/[classNameMaj]",
            "viewExtension":"cshtml",
            "viewCommentStart":"<!-- ",
            "viewCommentEnd":" -->"
        },
        "customChanges":[
            {
                "path":"[projectNameMaj]/appsettings.json",
                "changes":"\"[classNameMaj]Context\": \"server=[databaseHost];uid=[user];database=[databaseName];pwd=[pwd]\",",
                "withEndComma":false
            },
            {
                "path":"[projectNameMaj]/Program.cs",
                "changes":"builder.Services.AddDbContext<[classNameMaj]Context>(options => options.UseMySQL(builder.Configuration.GetConnectionString(\"[classNameMaj]Context\") ?? throw new InvalidOperationException(\"Connection string '[classNameMaj]Context' not found.\")));",
                "withEndComma":true
            }
        ],
        "navbarLinks":{
            "path":"[projectNameMaj]/Views/Shared/_Layout.cshtml",
            "link":"<a href=\"/[classNameMaj]\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    },
    {
        "id":6,
        "nom":"Spring JSP with PostgreSQL",
        "syntax":{
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":{
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":{
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"springjsp_psql_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/src/main/webapp/WEB-INF/views/jsp/layout/layout.jsp",
            "[projectNameMaj]/src/main/webapp/WEB-INF/views/jsp/login.jsp",
            "[projectNameMaj]/src/main/java/com/controllers/HelloController.java",
            "[projectNameMaj]/src/main/java/com/controllers/LoginController.java"
        ],
        "additionnalFiles":[],
        "model":{
            "modelImports":[
                "import veda.godao.annotations.Column;",
                "import veda.godao.annotations.Table;",
                "import veda.godao.annotations.PrimaryKey;"
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "@Table(\"[tableName]\")"
            ],
            "modelPrimaryFieldAnnotations":[
                "@PrimaryKey"
            ],
            "modelForeignFieldAnnotations":[
                "@veda.godao.annotations.ForeignKey(recursive=true)"
            ],
            "modelFieldAnnotations":[
                "@Column(\"[columnName]\")"
            ],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [fieldName[modelFieldCase]];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [fieldName[modelFieldCase]]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [fieldName[modelFieldCase]]=o; }",
            "modelConstructors":[
                "public [classNameMaj](){}",
                "public [classNameMaj]([primaryFieldType] o){ [primaryFieldName[modelFieldCase]]=o; }"
            ],
            "modelSavePath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/entities",
            "modelAdditionnalFiles":[],
            "modelExtension":"java",
            "modelPackage":"com.[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "import org.springframework.stereotype.Controller;",
                "import org.springframework.ui.ModelMap;",
                "import org.springframework.web.bind.annotation.GetMapping;",
                "import org.springframework.web.bind.annotation.PostMapping;",
                "import org.springframework.web.servlet.view.RedirectView;",
                "import com.[projectNameMin].entities.[classNameMaj];",
                "import veda.godao.DAO;",
                "import veda.godao.utils.DAOConnexion;",
                "import java.sql.Connection;",
                "import com.config.Constantes;",
                "import javax.servlet.http.HttpServletRequest;",
                "import javax.servlet.http.HttpSession;",
                "import java.net.URLDecoder;",
                "import java.net.URLEncoder;",
                "import java.nio.charset.StandardCharsets;",
                "import java.util.Base64;"
            ],
            "controllerAnnotations":[
                "@Controller"
            ],
            "controllerExtends":"",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[],
                    "controllerFieldContent":"private DAO dao=new DAO(\"[databaseName]\", \"[databaseHost]\", \"[databaseHost]\", \"[user]\", \"[pwd]\", [databaseUseSSL], [databaseID]);"
                }
            ],
            "controllerFieldsForeign":{
                "controllerFieldAnnotations":[],
                "controllerFieldContent":""
            },
            "controllerChangeInstanciation":{
                "template":"o.set[fieldNameMaj]([content]);",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"where.set[primaryNameMaj]([content]);",
                "value":"[primaryNameMin]"
            },
            "controllerForeignInstanciation":{
                "template":"o.set[fieldNameMaj](new com.[projectNameMin].entities.[foreignType]([content]));",
                "value":"[fieldNameMin]"
            },  
            "controllerForeignList":"com.[projectNameMin].entities.[foreignType][] [foreignNameMin]=dao.select(connex, com.[projectNameMin].entities.[foreignType].class);\nmodel.addAttribute(\"[foreignNameMin]s\", [foreignNameMin]);",
            "controllerForeignContextParam" : "",
            "controllerForeignContextInstanciation" : "",
            "controllerConstructors":[],
            "controllerForeignInclude":"",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/insert[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"springjsp/controller/springControllerInsert"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/tocrud[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springjsp/controller/springControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/update[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"springjsp/controller/springControllerUpdate"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/delete[classNameMin].do\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springjsp/controller/springControllerDelete"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/controllers",
            "controllerExtension":"java",
            "controllerPackage":"com.[projectNameMin].controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"[foreignType][] [foreignNameMin]=([foreignType][])request.getAttribute(\"[foreignNameMin]s\");",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".getLabel()",
            "viewTableLine":"<td><%= o.get[fieldNameMaj]()[foreignFieldGet] %></td>",
            "viewUpdateFormForeignField":"springjsp/view/components/flameworkViewUpdateForeign",
            "viewUpdateFormField":{
                "Integer":"springjsp/view/components/flameworkViewUpdateInt",
                "Double":"springjsp/view/components/flameworkViewUpdateDouble",
                "String":"springjsp/view/components/flameworkViewUpdateString",
                "java.time.LocalDate":"springjsp/view/components/flameworkViewUpdateDate",
                "java.time.LocalDateTime":"springjsp/view/components/flameworkViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"springjsp/view/components/flameworkViewInsertForeign",
            "viewInsertFormField":{
                "Integer":"springjsp/view/components/flameworkViewInsertInt",
                "Double":"springjsp/view/components/flameworkViewInsertDouble",
                "String":"springjsp/view/components/flameworkViewInsertString",
                "java.time.LocalDate":"springjsp/view/components/flameworkViewInsertDate",
                "java.time.LocalDateTime":"springjsp/view/components/flameworkViewInsertTimestamp"
            },
            "viewName":"[classNameMin]",
            "viewContent":"springjsp/view/flameworkView",
            "viewSavePath":"[projectNameMaj]/src/main/webapp/WEB-INF/views/jsp",
            "viewExtension":"jsp",
            "viewCommentStart":"<!-- ",
            "viewCommentEnd":" -->"
        },
        "customChanges":[],
        "navbarLinks":{
            "path":"[projectNameMaj]/src/main/webapp/WEB-INF/views/jsp/layout/layout.jsp",
            "link":"<a href=\"/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    },
    {
        "id":7,
        "nom":"React Next with Spring REST",
        "syntax":{
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":{
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":{
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"springrest_next_skeleton",
        "projectNameTags":[
            "[projectNameMaj]/spring_part/settings.gradle",
            "[projectNameMaj]/spring_part/src/main/resources/application.properties",
            "[projectNameMaj]/react_part/package-lock.json",
            "[projectNameMaj]/react_part/package.json",
            "[projectNameMaj]/react_part/app/layout.js"
        ],
        "additionnalFiles":[],
        "model":{
            "modelImports":[
                "import jakarta.persistence.Entity;",
                "import jakarta.persistence.GeneratedValue;",
                "import jakarta.persistence.GenerationType;",
                "import jakarta.persistence.Id;",
                "import veda.godao.annotations.Column;",
                "import veda.godao.annotations.PrimaryKey;",
                "import veda.godao.annotations.Table;"
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "@Entity",
                "@Table(\"[tableName]\")"
            ],
            "modelPrimaryFieldAnnotations":[
                "@Id",
                "@GeneratedValue(strategy=GenerationType.IDENTITY)",
                "@PrimaryKey"
            ],
            "modelForeignFieldAnnotations":[
                "@jakarta.persistence.ManyToOne",
                "@jakarta.persistence.JoinColumn(name=\"[columnName]\")",
                "@veda.godao.annotations.ForeignKey(recursive=true)"
            ],
            "modelFieldAnnotations":[
                "@Column(\"[columnName]\")"
            ],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [columnName];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [columnName]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [columnName]=o; }",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/spring_part/src/main/java/com/[projectNameMin]/entities",
            "modelAdditionnalFiles":[
                {
                    "name":"[classNameMaj]Repository.java",
                    "content":"spring/Repository.templ"
                }
            ],
            "modelExtension":"java",
            "modelPackage":"com.[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "import org.springframework.beans.factory.annotation.Autowired;",
                "import org.springframework.web.bind.annotation.RestController;",
                "import org.springframework.web.bind.annotation.GetMapping;",
                "import org.springframework.web.bind.annotation.PostMapping;",
                "import org.springframework.web.bind.annotation.PutMapping;",
                "import org.springframework.web.bind.annotation.DeleteMapping;",
                "import org.springframework.web.servlet.view.RedirectView;",
                "import com.config.Constantes;",
                "import com.[projectNameMin].entities.[classNameMaj];",
                "import com.[projectNameMin].entities.[classNameMaj]Repository;",
                "import org.springframework.web.bind.annotation.CrossOrigin;",
                "import veda.godao.DAO;",
                "import veda.godao.utils.DAOConnexion;",
                "import java.sql.Connection;",
                "import java.sql.SQLException;"
            ],
            "controllerAnnotations":[
                "@RestController",
                "@CrossOrigin(origins={\"http://localhost:3000\"})"
            ],
            "controllerExtends":"",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[],
                    "controllerFieldContent":"private DAO dao=new DAO(\"[databaseDriver]\", \"[databaseSgbd]\", \"[databaseHost]\", \"[databasePort]\", \"[databaseName]\", \"[user]\", \"[pwd]\", [databaseUseSSL], [databaseAllowKey], [databaseID]);"
                },{
                    "controllerFieldAnnotations":[
                        "@Autowired"
                    ],
                    "controllerFieldContent":"private [classNameMaj]Repository repo;"
                }
            ],
            "controllerFieldsForeign":{
                "controllerFieldAnnotations":[
                    "@Autowired"
                ],
                "controllerFieldContent":"private com.[projectNameMin].entities.[foreignNameMaj]Repository repo[foreignNameMaj];"
            },
            "controllerChangeInstanciation":{
                "template":"o.set[fieldNameMaj]([content]);",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"where.set[primaryNameMaj]([content]);",
                "value":"[primaryNameMin]"
            },
            "controllerForeignInstanciation":{
                "template":"o.set[fieldNameMaj](repo[foreignType].findById([content]).orElseThrow());",
                "value":"[fieldNameMin]"
            },
            "controllerForeignList":"model.addAttribute(\"[foreignNameMin]s\", repo[foreignType].findAll());",
            "controllerForeignContextParam" : "",
            "controllerForeignContextInstanciation" : "",
            "controllerConstructors":[],
            "controllerForeignInclude":"",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping(\"/[classNameMin]\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"springrest_next/controller/springControllerInsert"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/[classNameMin]s\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springrest_next/controller/springControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/[classNameMin]foreign\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springrest_next/controller/springRestControllerReadForeign"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PutMapping(\"/[classNameMin]\")"
                    ],
                    "controllerMethodParameter":"String [fieldNameMin]",
                    "controllerMethodContent":"springrest_next/controller/springControllerUpdate"
                },
                {
                    "controllerMethodAnnotations":[
                        "@DeleteMapping(\"/[classNameMin]\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springrest_next/controller/springControllerDelete"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/[classNameMin]count\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springrest_next/controller/springRestControllerCount"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/[classNameMin]limit\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"springrest_next/controller/springRestControllerLimit"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/spring_part/src/main/java/com/[projectNameMin]/controllers",
            "controllerExtension":"java",
            "controllerPackage":"com.[projectNameMin].controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"const [data[foreignNameMin], setData[foreignNameMin]]=useState([]);\nuseEffect(()=>{ fetch(\"http://localhost:8080/[foreignNameMin]foreign\").then((res)=>{ return res.json(); }).then((data)=>{ setData[foreignNameMin](data); }); },[]);",
            "viewTableHeader":"<th scope=\"col\">[fieldNameFormattedMaj]</th>",
            "foreignFieldGet":".label",
            "viewTableLine":"<td>{o.[fieldNameMin][foreignFieldGet]}</td>",
            "viewUpdateFormForeignField":"springrest_next/view/components/springViewUpdateForeign",
            "viewUpdateFormField":{
                "Integer":"springrest_next/view/components/springViewUpdateInt",
                "Double":"springrest_next/view/components/springViewUpdateDouble",
                "String":"springrest_next/view/components/springViewUpdateString",
                "java.time.LocalDate":"springrest_next/view/components/springViewUpdateDate",
                "java.time.LocalDateTime":"springrest_next/view/components/springViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"springrest_next/view/components/springViewInsertForeign",
            "viewInsertFormField":{
                "Integer":"springrest_next/view/components/springViewInsertInt",
                "Double":"springrest_next/view/components/springViewInsertDouble",
                "String":"springrest_next/view/components/springViewInsertString",
                "java.time.LocalDate":"springrest_next/view/components/springViewInsertDate",
                "java.time.LocalDateTime":"springrest_next/view/components/springViewInsertTimestamp"
            },
            "viewName":"page",
            "viewContent":"springrest_next/view/springRestNextView",
            "viewSavePath":"[projectNameMaj]/react_part/app/[classNameMin]",
            "viewExtension":"js",
            "viewCommentStart":"{/* ",
            "viewCommentEnd":" */}"
        },
        "customChanges":[],
        "navbarLinks":{
            "path":"[projectNameMaj]/react_part/app/layout.js",
            "link":"<a href=\"/[classNameMin]\" className=\"nav-item nav-link\"><i className=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    }
]