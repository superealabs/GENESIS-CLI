- id: 1
  langageId: 1
  name: "Spring MVC"
  template: "Template"
  additionalFiles: [ ]
  dependencies:
    - groupId: "org.springframework.boot"
      artifactId: "spring-boot-starter-data-jpa"
      version: "{{removeLine}}"
    - groupId: "org.springframework.boot"
      artifactId: "spring-boot-starter-web"
      version: "{{removeLine}}"
    - groupId: "org.springframework.boot"
      artifactId: "spring-boot-starter-thymeleaf"
      version: "{{removeLine}}"
    - groupId: "org.springframework.boot"
      artifactId: "spring-boot-starter-test"
      version: "{{removeLine}}"
    - groupId: "org.thymeleaf.extras"
      artifactId: "thymeleaf-extras-java8time"
      version: "3.0.1.RELEASE"
    - groupId: "nz.net.ultraq.thymeleaf"
      artifactId: "thymeleaf-layout-dialect"
      version: "3.3.0"
  model:
    modelImports: |
      import jakarta.persistence.*;
    modelExtends: ""
    modelAnnotations: |
      @Entity
      @Table(name="#{tableName}")
    modelFieldContent: |
      {{tab}}{{#each fields}} 
      {{tab}}{{#if this.isPrimaryKey}}
      {{tab}}@Id
      {{tab}}@GeneratedValue(strategy=GenerationType.IDENTITY)
      {{tab}}@Column(name="#{this.columnName}"){{elseIf this.isForeignKey}}
      {{tab}}@ManyToOne
      {{tab}}@JoinColumn(name="#{this.columnName}"){{else}}
      {{tab}}@Column(name="#{this.columnName}"){{/if}}
      {{tab}}private #{this.type} #{this.name};{{#if !@last}}{{newline}}{{/if}}
      {{tab}}{{/each}}
    modelGetterSetter: |
      {{tab}}{{#each fields}}
      {{tab}}{{#if this.withGetters}}
      {{tab}}public #{this.type} get#{majStart(this.name)}() {
      {{tab}}    return #{this.name};
      {{tab}}}{{/if}}
      {{#if this.withSetters}}
      {{tab}}public void set#{majStart(this.name)}(#{this.type} #{this.name}) {
      {{tab}}    this.#{this.name} = #{this.name};
      {{tab}}}{{#if !@last}}
      {{tab}}{{/if}}
      {{tab}}{{/if}}{{/each}}
    modelConstructors: |
      {{tab}}public #{majStart(className)}() {
      {{tab}}}

      {{tab}}public #{majStart(className)}({{#each fieldsPK}}#{this.type} #{this.name}{{#if !@last}}, {{/if}}{{/each}}) {
      {{tab}}    {{#each fieldsPK}}
      {{tab}}    this.#{this.name} = #{this.name};{{#if !@last}}
      {{tab}}    {{/if}}{{/each}}
      {{tab}}}
      
      {{tab}}public #{majStart(className)}({{#each fields}}#{this.type} #{this.name}{{#if !@last}}, {{/if}}{{/each}}) {
      {{tab}}    {{#each fields}}
      {{tab}}    this.#{this.name} = #{this.name};{{#if !@last}}
      {{tab}}    {{/if}}{{/each}}
      {{tab}}}
    modelSavePath: "#{majStart(projectName)}/src/main/java/#{groupLink}/#{lowerCase(projectName)}/models"
    modelForeignContextAttr: ""
    modelExtension: "java"
    modelPackage: "#{groupLink}.#{lowerCase(projectName)}.models;"
  modelDao:
    isUnique: false
    modelDaoImports: |
      import org.springframework.data.jpa.repository.JpaRepository;
      import #{groupLink}.#{lowerCase(projectName)}.models.#{majStart(className)};
    modelDaoAnnotations: "{{newline}}"
    modelDaoExtends: "extends JpaRepository<#{majStart(className)}, #{pkColumnType}>"
    modelDaoName: "#{majStart(className)}Repository"
    modelDaoFieldContent: "{{removeLine}}"
    modelDaoMethodContent: "{{removeLine}}"
    modelDaoConstructors: "{{removeLine}}"
    modelDaoSavePath: "#{majStart(projectName)}/src/main/java/#{groupLink}/#{lowerCase(projectName)}/repositories"
    modelDaoExtension: "java"
    modelDaoPackage: "#{groupLink}.#{lowerCase(projectName)}.repositories;"
    modelDaoAdditionalFiles:
      - fileType: ""
        fileName: ""
        extension: ""
        content: ""
        destinationPath: ""

  service:
    serviceImports: |
      import #{groupLink}.#{lowerCase(projectName)}.models.#{majStart(className)};
      import org.springframework.stereotype.Service;
      import #{groupLink}.#{lowerCase(projectName)}.repositories.#{majStart(className)}Repository;
      import org.springframework.beans.factory.annotation.Autowired;
      import java.util.List;
      import java.util.Optional;

    serviceAnnotations: |
      @Service
    serviceExtends: ""
    serviceName: "#{majStart(className)}Service"
    serviceFieldContent: |
      {{tab}}private final #{majStart(className)}Repository #{minStart(className)}Repository;
    serviceConstructors: |
      {{tab}}@Autowired
      {{tab}}public #{majStart(className)}Service(#{majStart(className)}Repository #{minStart(className)}Repository) {
      {{tab}}    this.#{lowerCase(className)}Repository = #{minStart(className)}Repository;
      {{tab}}}
    serviceMethodContent: |
      {{tab}}public List<#{majStart(className)}> getAll#{majStart(className)}() {
      {{tab}}    return #{minStart(className)}Repository.findAll();
      {{tab}}}  
      
      {{tab}}public #{majStart(className)} get#{majStart(className)}ById(#{pkColumnType} id) {
      {{tab}}    Optional<#{majStart(className)}> #{minStart(className)} = #{minStart(className)}Repository.findById(id);
      {{tab}}    if (#{minStart(className)}.isPresent()) {
      {{tab}}       return #{minStart(className)}.get();
      {{tab}}    } else {
      {{tab}}       throw new RuntimeException("#{majStart(className)} not found with id " + id);
      {{tab}}    }
      {{tab}}}
      
      {{tab}}public #{majStart(className)} create#{majStart(className)}(#{majStart(className)} #{minStart(className)}) {
      {{tab}}    return #{minStart(className)}Repository.save(#{minStart(className)});
      {{tab}}}

      {{tab}}public #{majStart(className)} update#{majStart(className)}(#{pkColumnType} id, #{majStart(className)} #{lowerCase(className)}) {
      {{tab}}    Optional<#{majStart(className)}> existing#{majStart(className)} = #{lowerCase(className)}Repository.findById(id);
      {{tab}}       if (existing#{majStart(className)}.isPresent()) {
      {{tab}}	       #{lowerCase(className)}.set#{majStart(className)}id(id);
      {{tab}}             return #{lowerCase(className)}Repository.save(#{lowerCase(className)});
      {{tab}}       } else {
      {{tab}}          throw new RuntimeException("#{majStart(className)} not found with id " + id);
      {{tab}}       }
      {{tab}}}
      
      {{tab}}public void delete#{majStart(className)}(#{pkColumnType} id) {
      {{tab}}    #{lowerCase(className)}Repository.deleteById(id);
      {{tab}}}
    serviceSavePath: "#{majStart(projectName)}/src/main/java/#{groupLink}/#{lowerCase(projectName)}/services"
    serviceExtension: "java"
    servicePackage: "#{groupLink}.#{lowerCase(projectName)}.services;"
  controller:
    controllerImports: |
      import org.springframework.ui.Model;
      import #{groupLink}.#{lowerCase(projectName)}.models.*;
      import #{groupLink}.#{lowerCase(projectName)}.services.*;
      import org.springframework.stereotype.Controller;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import org.springframework.web.servlet.mvc.support.RedirectAttributes;
    controllerAnnotations: |
      @Controller
      @RequestMapping("/#{lowerCase(classNameLink)}")
    controllerExtends: ""
    controllerName: "#{majStart(className)}Controller"
    controllerFieldContent: |
      {{tab}}private final #{majStart(className)}Service #{lowerCase(className)}Service;
      {{tab}}{{#each fields}} 
      {{tab}}{{#if this.isForeignKey}}
      {{tab}}private final #{majStart(this.name)}Service #{lowerCase(this.name)}Service;
      {{tab}}{{/if}}{{/each}}
    controllerConstructors: |      
      {{tab}}public #{majStart(className)}Controller({{#each fields}}{{#if this.isForeignKey}} #{majStart(this.name)}Service #{lowerCase(this.name)}Service,{{/if}}{{/each}} #{majStart(className)}Service #{lowerCase(className)}Service) {
      {{tab}}    this.#{lowerCase(className)}Service = #{lowerCase(className)}Service;
      {{tab}}    {{#each fields}} 
      {{tab}}    {{#if this.isForeignKey}}
      {{tab}}    this.#{lowerCase(this.name)}Service = #{lowerCase(this.name)}Service;
      {{tab}}    {{/if}}{{/each}}
      {{tab}}}
    controllerMethodContent: |
      {{tab}}@GetMapping
      {{tab}}public String getAll#{majStart(classNameLink)}(Model model) {
      {{tab}}    List<#{majStart(className)}> #{lowerCase(classNameLink)} = #{lowerCase(className)}Service.getAll#{majStart(className)}();
      {{tab}}    {{#each fields}} 
      {{tab}}    {{#if this.isForeignKey}}
      {{tab}}    List<#{majStart(this.name)}> #{lowerCase(this.name)}s = #{lowerCase(this.name)}Service.getAll#{majStart(this.name)}();
      {{tab}}    {{/if}}{{/each}}
      {{tab}}    model.addAttribute("#{lowerCase(classNameLink)}", #{lowerCase(classNameLink)});
      {{tab}}    {{#each fields}} 
      {{tab}}    {{#if this.isForeignKey}}
      {{tab}}    model.addAttribute("#{this.name}s", #{this.name}s);
      {{tab}}    {{/if}}{{/each}}
      {{tab}}    return "#{lowerCase(classNameLink)}/list-#{lowerCase(className)}";
      {{tab}}}
      
      {{tab}}@GetMapping("/create-#{lowerCase(className)}")
      {{tab}}public String return#{majStart(classNameLink)}(Model model) {
      {{tab}}    {{#each fields}} 
      {{tab}}    {{#if this.isForeignKey}}
      {{tab}}    List<#{majStart(this.name)}> #{lowerCase(this.name)}s = #{lowerCase(this.name)}Service.getAll#{majStart(this.name)}();
      {{tab}}    {{/if}}{{/each}}
      {{tab}}    {{#each fields}} 
      {{tab}}    {{#if this.isForeignKey}}
      {{tab}}    model.addAttribute("#{this.name}s", #{this.name}s);
      {{tab}}    {{/if}}{{/each}}
      {{tab}}    return "#{lowerCase(classNameLink)}/create-#{lowerCase(className)}";
      {{tab}}}
      
      {{tab}}@PostMapping
      {{tab}}public String create#{majStart(className)}(@ModelAttribute #{majStart(className)} #{lowerCase(className)}, RedirectAttributes redirectAttributes, Model model) {
      {{tab}}    try {
      {{tab 2}}    #{majStart(className)} new#{majStart(className)} = #{lowerCase(className)}Service.create#{majStart(className)}(#{lowerCase(className)});
      {{tab 2}}    model.addAttribute("new#{majStart(className)}", new#{majStart(className)});
      
      {{tab 2}}    redirectAttributes.addFlashAttribute("success", "#{lowerCase(className)} successfully completed");
      {{tab}}    } catch (Exception e) {
      {{tab 2}}    redirectAttributes.addFlashAttribute(
      {{tab 2}}     "error",
      {{tab 2}}     "An error has occurred during the creation of #{lowerCase(className)}");
      {{tab}}    }
      
      {{tab}}    return "redirect:/#{lowerCase(classNameLink)}";
      {{tab}}}
      
      {{tab}}@PostMapping("/{id}")
      {{tab}}public String update#{majStart(className)}(@PathVariable #{pkColumnType} id, @ModelAttribute #{majStart(className)} #{lowerCase(className)}, RedirectAttributes redirectAttributes, Model model) {
      {{tab}}    try {
      {{tab 2}}    #{majStart(className)} update#{majStart(className)} = #{lowerCase(className)}Service.update#{majStart(className)}(id, #{lowerCase(className)});
      {{tab 2}}    model.addAttribute("update#{majStart(className)}", update#{majStart(className)});
      
      {{tab 2}}    redirectAttributes.addFlashAttribute("success", "#{lowerCase(className)} modify with success");
      {{tab}}    } catch (Exception e) {
      {{tab 2}}    redirectAttributes.addFlashAttribute(
      {{tab 2}}     "error",
      {{tab 2}}     "An error has occurred during the update of #{lowerCase(className)}");
      {{tab}}    }
      
      {{tab}}    return "redirect:/#{lowerCase(classNameLink)}";
      {{tab}}}
      
      {{tab}}@PostMapping("/{id}/delete")
      {{tab}}public String delete#{majStart(className)}ById(@PathVariable #{pkColumnType} id, RedirectAttributes redirectAttributes, Model model) {
      {{tab}}    try {
      {{tab 2}}     #{lowerCase(className)}Service.delete#{majStart(className)}(id);
      
      {{tab 2}}    redirectAttributes.addFlashAttribute("success", "#{lowerCase(className)} has been deleted ");
      {{tab}}    } catch (Exception e) {
      {{tab 2}}    redirectAttributes.addFlashAttribute(
      {{tab 2}}     "error",
      {{tab 2}}     "An error has occurred during the delete of #{lowerCase(className)}");
      {{tab}}    }
      
      {{tab}}    return "redirect:/#{lowerCase(classNameLink)}";
      {{tab}}}
    controllerSavePath: "#{majStart(projectName)}/src/main/java/#{groupLink}/#{lowerCase(projectName)}/controllers"
    controllerExtension: "java"
    controllerPackage: "#{groupLink}.#{lowerCase(projectName)}.controllers;"
  view:
    viewExtension: "html"
    viewSavePath: "#{majStart(projectName)}/src/main/resources/templates/#{lowerCase(classNameLink)}"
    listViewName: "list-#{lowerCase(className)}"
    createViewName: "create-#{lowerCase(className)}"
  customChanges: [ ]
  navbarLinks:
    path: "[projectNameMaj]/src/main/resources/templates/layout/layout.html"
    link: "<a href=\"/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
