- id: 1
  name: "Maven"
  frameworkIds:
    - 1
    - 3
  projectFilesEdits:
    - fileType: "Xml"
      fileName: "pom"
      extension: "xml"
      content: |
        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        {{tab}}<modelVersion>4.0.0</modelVersion>
        {{tab}}<parent>
        {{tab}}{{tab}}<groupId>org.springframework.boot</groupId>
        {{tab}}{{tab}}<artifactId>spring-boot-starter-parent</artifactId>
        {{tab}}{{tab}}<version>${frameworkVersion}</version>
        {{tab}}{{tab}}<relativePath/>
        {{tab}}</parent>
        {{tab}}<groupId>${groupLink}</groupId>
        {{tab}}<artifactId>${projectName}</artifactId>
        {{tab}}<version>0.0.1-SNAPSHOT</version>
        {{tab}}<name>${projectName}</name>
        {{tab}}<description>${projectDescription}</description>
        {{tab}}<url/>
        {{tab}}<licenses>
        {{tab}}{{tab}}<license/>
        {{tab}}</licenses>
        {{tab}}<developers>
        {{tab}}{{tab}}<developer/>
        {{tab}}</developers>
        {{tab}}<scm>
        {{tab}}{{tab}}<connection/>
        {{tab}}{{tab}}<developerConnection/>
        {{tab}}{{tab}}<tag/>
        {{tab}}{{tab}}<url/>
        {{tab}}</scm>
        {{tab}}<properties>
        {{tab}}{{tab}}<java.version>${languageVersion}</java.version>
        {{tab}}{{tab}}{{#if useCloud}}<spring-cloud.version>2023.0.3</spring-cloud.version>{{/if}}
        {{tab}}</properties>
        {{tab}}<dependencies>
        {{tab}}{{tab}}{{#each dependencies}}<dependency>
        {{tab}}{{tab}}{{tab}}<groupId>${this.groupId}</groupId>
        {{tab}}{{tab}}{{tab}}<artifactId>${this.artifactId}</artifactId>
        {{tab}}{{tab}}{{tab}}<version>${this.version}</version>
        {{tab}}{{tab}}{{tab}}<scope>${this.scope}</scope>
        {{tab}}{{tab}}</dependency>{{#if !@last}}{{newline}}{{tab}}{{tab}}{{/if}}{{/each}}
        {{tab}}{{tab}}{{#if useDB}}<dependency>
        {{tab}}{{tab}}{{tab}}<groupId>${DBgroupId}</groupId>
        {{tab}}{{tab}}{{tab}}<artifactId>${DBartifactId}</artifactId>
        {{tab}}{{tab}}{{tab}}<version>${DBversion}</version>
        {{tab}}{{tab}}</dependency>{{/if}}
        {{tab}}{{tab}}{{#if useEurekaServer}}        
        {{tab}}{{tab}}<dependency>
        {{tab}}{{tab}}{{tab}}<groupId>org.springframework.cloud</groupId>
        {{tab}}{{tab}}{{tab}}<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        {{tab}}{{tab}}</dependency>{{/if}}
        {{tab}}</dependencies>
        {{#if useCloud}}
        {{tab}}<dependencyManagement>
        {{tab}}{{tab}}<dependencies>
        {{tab}}{{tab}}{{tab}}<dependency>
        {{tab}}{{tab}}{{tab}}{{tab}}<groupId>org.springframework.cloud</groupId>
        {{tab}}{{tab}}{{tab}}{{tab}}<artifactId>spring-cloud-dependencies</artifactId>
        {{tab}}{{tab}}{{tab}}{{tab}}<version>$[spring-cloud.version]</version>
        {{tab}}{{tab}}{{tab}}{{tab}}<type>pom</type>
        {{tab}}{{tab}}{{tab}}{{tab}}<scope>import</scope>
        {{tab}}{{tab}}{{tab}}</dependency>
        {{tab}}{{tab}}</dependencies>
        {{tab}}</dependencyManagement>{{/if}}        
        
        {{tab}}<build>
        {{tab}}{{tab}}<plugins>
        {{tab}}{{tab}}{{tab}}<plugin>
        {{tab}}{{tab}}{{tab}}{{tab}}<groupId>org.springframework.boot</groupId>
        {{tab}}{{tab}}{{tab}}{{tab}}<artifactId>spring-boot-maven-plugin</artifactId>
        {{tab}}{{tab}}{{tab}}</plugin>
        {{tab}}{{tab}}</plugins>
        {{tab}}</build>
        </project>

      destinationPath: "${destinationFolder}/${majStart(projectName)}/"
  projectFiles:
    - fileType: "Script"
      fileName: "mvnw"
      sourcePath: "data_genesis/maven/"
      destinationPath: "${destinationFolder}/${majStart(projectName)}/"

    - fileType: "ScriptWin"
      fileName: "mvnw.cmd"
      sourcePath: "data_genesis/maven/"
      destinationPath: "${destinationFolder}/${majStart(projectName)}/"
  projectFolders:
    - folderType: "MavenFolder"
      folderName: ".mvn"
      sourcePath: "data_genesis/maven/.mvn"
      destinationPath: "${destinationFolder}/${majStart(projectName)}/"

- id: 2
  name: "ASP.NET Core Project"
  frameworkIds:
    - 2
  projectFilesEdits:
    - fileType: "ProgramFile"
      fileName: "Program"
      extension: "cs"
      content: |
        using Microsoft.EntityFrameworkCore;
        using ${majStart(projectName)}.Data;
        using ${majStart(projectName)}.Repositories.Implementation;
        using ${majStart(projectName)}.Repositories.Interface;
        using ${majStart(projectName)}.Services.Implementation;
        using ${majStart(projectName)}.Services.Interface;

        var builder = WebApplication.CreateBuilder(args);

        // Add services to the container.
        builder.Services.AddDbContext<${majStart(projectName)}Context>(options =>
            options.Use${daoName}(builder.Configuration.GetConnectionString("DefaultConnection")));
        
        // Adding repositories ...
        {{#each entities}}
        builder.Services.AddScoped<I${this}Repository, ${this}Repository>();
        {{/each}}
        // Adding services ...
        {{#each entities}}
        builder.Services.AddScoped<I${this}Service, ${this}Service>();
        {{/each}}
        // Adding controllers ...
        builder.Services.AddControllers();

        // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen();

        var app = builder.Build();

        // Configure the HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
        {{tab}}app.UseSwagger();
        {{tab}}app.UseSwaggerUI();
        }

        app.UseHttpsRedirection();
        app.UseAuthorization();
        app.MapControllers();

        app.Run();
      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/"

    - fileType: "HttpFile"
      fileName: "${majStart(projectName)}"
      extension: "http"
      content: |
        @TestDbCRUD_HostAddress = http://localhost:${projectPort}

        {{#each entities}}
        GET {{TestDbCRUD_HostAddress}}/${this}s
        Accept: application/json
        
        ###{{#if !@last}}{{newline}}{{/if}}{{/each}}

      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/"

    - fileType: "AppSettings"
      fileName: "appsettings"
      extension: "json"
      content: |
        {
          "Logging": {
            "LogLevel": {
              "Default": "${loggingLevel}",
              "Microsoft.AspNetCore": "${loggingLevel}"
            }
          },
          "AllowedHosts": "*"{{#if useDB}},
          "ConnectionStrings": {
            "DefaultConnection": "${connectionString}"
          }{{/if}}
        }

      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/"

    - fileType: "ProjectFile"
      fileName: "${majStart(projectName)}"
      extension: "csproj"
      content: |
        <Project Sdk="Microsoft.NET.Sdk.Web">
        
        {{tab}}<PropertyGroup>
        {{tab}}    <TargetFramework>net${frameworkVersion}</TargetFramework>
        {{tab}}    <Nullable>enable</Nullable>
        {{tab}}    <ImplicitUsings>enable</ImplicitUsings>
        {{tab}}    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        {{tab}}    <RootNamespace>${projectName}</RootNamespace>
        {{tab}}    <Description>${projectDescription}</Description>
        {{tab}}</PropertyGroup>
        
        {{tab}}<ItemGroup>
        {{tab}}    {{#if useDB}}<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="${frameworkVersion}.0">
        {{tab}}        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        {{tab}}        <PrivateAssets>all</PrivateAssets>
        {{tab}}    </PackageReference>
        {{tab}}    <PackageReference Include="${DBartifactId}" Version="${frameworkVersion}.0"/>{{/if}}
        {{tab}}    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.9.0"/>
        {{tab}}</ItemGroup>
        </Project>

      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/"

    - fileType: "SolutionFile"
      fileName: "${majStart(projectName)}"
      extension: "sln"
      content: |
        Microsoft Visual Studio Solution File, Format Version 12.00
        
        Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "${majStart(projectName)}", "${majStart(projectName)}\${majStart(projectName)}.csproj", "{B06BF436-528B-4DF7-9F86-6F86B6A77E84}"
        EndProject
        Global
        {{tab}}GlobalSection(SolutionConfigurationPlatforms) = preSolution
        {{tab}}{{tab}}Debug|Any CPU = Debug|Any CPU
        {{tab}}{{tab}}Release|Any CPU = Release|Any CPU
        {{tab}}EndGlobalSection
        {{tab}}GlobalSection(ProjectConfigurationPlatforms) = postSolution
        {{tab}}{{tab}}{B06BF436-528B-4DF7-9F86-6F86B6A77E84}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        {{tab}}{{tab}}{B06BF436-528B-4DF7-9F86-6F86B6A77E84}.Debug|Any CPU.Build.0 = Debug|Any CPU
        {{tab}}{{tab}}{B06BF436-528B-4DF7-9F86-6F86B6A77E84}.Release|Any CPU.ActiveCfg = Release|Any CPU
        {{tab}}{{tab}}{B06BF436-528B-4DF7-9F86-6F86B6A77E84}.Release|Any CPU.Build.0 = Release|Any CPU
        {{tab}}EndGlobalSection
        EndGlobal
      destinationPath: "${destinationFolder}/${majStart(projectName)}/"

    - fileType: "LaunchSettingsFile"
      fileName: "launchSettings"
      extension: "json"
      content: |
        {
          "$schema": "http://json.schemastore.org/launchsettings.json",
          "iisSettings": {
            "windowsAuthentication": false,
            "anonymousAuthentication": true,
            "iisExpress": {
              "applicationUrl": "http://localhost:53034",
              "sslPort": 44349
            }
          },
          "profiles": {
            "http": {
              "commandName": "Project",
              "dotnetRunMessages": true,
              "launchBrowser": true,
              "launchUrl": "swagger",
              "applicationUrl": "http://localhost:${projectPort}",
              "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
              }
            },
            "https": {
              "commandName": "Project",
              "dotnetRunMessages": true,
              "launchBrowser": true,
              "launchUrl": "swagger",
              "applicationUrl": "https://localhost:7273;http://localhost:${projectPort}",
              "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
              }
            },
            "IIS Express": {
              "commandName": "IISExpress",
              "launchBrowser": true,
              "launchUrl": "swagger",
              "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
              }
            }
          }
        }
      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/Properties/"

    - fileType: "DbContextFile"
      fileName: "${majStart(projectName)}Context"
      extension: "cs"
      content: |
        namespace ${majStart(projectName)}.Data;
        
        using Microsoft.EntityFrameworkCore;
        using Models;
        
        public class ${majStart(projectName)}Context : DbContext
        {
            public ${majStart(projectName)}Context(DbContextOptions<${majStart(projectName)}Context> options) : base(options)
            {
            }
            {{#each entities}}
            public DbSet<${this}> ${this}s { get; set; }
            {{/each}}
        }
      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/Data/"


    - fileType: "Generic  file"
      fileName: "IRepository"
      extension: "cs"
      content: |
        namespace ${majStart(projectName)}.Repositories.Generic;
        
        using System.Linq.Expressions;

        public interface IRepository<T, in TKey> where T : class
        {
        {{tab}}Task<IEnumerable<T>> GetAllWithIncludes(params Expression<Func<T, object?>>[]? includeProperties);
        {{tab}}Task<T?> GetByIdAsync(TKey id, params Expression<Func<T, object?>>[]? includeProperties);
        {{tab}}Task AddAsync(T entity);
        {{tab}}Task UpdateAsync(T entity);
        {{tab}}Task DeleteAsync(TKey id);
        {{tab}}Task<bool> ExistsAsync(TKey id);
        }
      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/Repositories/Generic/"

    - fileType: "Implementation file"
      fileName: "Repository"
      extension: "cs"
      content: |
        namespace ${majStart(projectName)}.Repositories.Generic;
        
        using System.ComponentModel.DataAnnotations;
        using System.Linq.Expressions;
        using Microsoft.EntityFrameworkCore;
        using Data;

        public class Repository<T, TKey>: IRepository<T, TKey>, IDisposable, IAsyncDisposable where T : class
        {
        
        {{tab}}private readonly DbSet<T> _dbSet;
        {{tab}}private readonly ${majStart(projectName)}Context _context;
        
        {{tab}}public Repository(${majStart(projectName)}Context context)
        {{tab}}{
        {{tab}}    _context = context;
        {{tab}}    _dbSet = context.Set<T>();
        {{tab}}}

        {{tab}}public async ValueTask DisposeAsync()
        {{tab}}{
        {{tab}}{{tab}}await _context.DisposeAsync();
        {{tab}}}

        {{tab}}public void Dispose()
        {{tab}}{
        {{tab}}{{tab}}_context.Dispose();
        {{tab}}}

        {{tab}}public async Task<IEnumerable<T>> GetAllWithIncludes(params Expression<Func<T, object?>>[]? includeProperties)
        {{tab}}{
        {{tab}}{{tab}}var query = GetQuery(_dbSet, includeProperties);
        {{tab}}{{tab}}query = query.OrderBy(e => EF.Property<object>(e, GetKeyPropertyName()));
        {{tab}}{{tab}}return await query.ToListAsync();
        {{tab}}}     

        {{tab}}public async Task<T?> GetByIdAsync(TKey id, params Expression<Func<T, object?>>[]? includeProperties)
        {{tab}}{
        {{tab}}{{tab}}var keyPropertyName = GetKeyPropertyName();
        {{tab}}{{tab}}var query = GetQuery(_dbSet, includeProperties);
        {{tab}}{{tab}}return await query.FirstOrDefaultAsync(e => EF.Property<TKey>(e, keyPropertyName)!.Equals(id));
        {{tab}}}

        {{tab}}public async Task AddAsync(T entity)
        {{tab}}{
        {{tab}}    await _dbSet.AddAsync(entity);
        {{tab}}    await _context.SaveChangesAsync();
        {{tab}}}

        {{tab}}public async Task UpdateAsync(T entity)
        {{tab}}{
        {{tab}}    _context.Entry(entity).State = EntityState.Modified;
        {{tab}}    await _context.SaveChangesAsync();
        {{tab}}}

        {{tab}}public async Task DeleteAsync(TKey id)
        {{tab}}{
        {{tab}}    var entity = await GetByIdAsync(id);
        {{tab}}    if (entity == null) 
        {{tab}}        throw new KeyNotFoundException($"Entity with ID {id} not found.");
        {{tab}}    _dbSet.Remove(entity);
        {{tab}}    await _context.SaveChangesAsync();
        {{tab}}}

        {{tab}}public async Task<bool> ExistsAsync(TKey id)
        {{tab}}{
        {{tab}}{{tab}}if (EqualityComparer<TKey>.Default.Equals(id, default)) return false;
        {{tab}}{{tab}}
        {{tab}}{{tab}}var keyPropertyName = GetKeyPropertyName();
        {{tab}}{{tab}}
        {{tab}}{{tab}}if (string.IsNullOrEmpty(keyPropertyName))
        {{tab}}{{tab}}throw new InvalidOperationException($"No key property found for type {typeof(T).Name}");
        {{tab}}
        {{tab}}{{tab}}return await _dbSet.AnyAsync(e =>
        {{tab}}{{tab}}    EF.Property<TKey>(e, keyPropertyName) != null &&
        {{tab}}{{tab}}    EF.Property<TKey>(e, keyPropertyName)!.Equals(id));
        {{tab}}}

        {{tab}}private IQueryable<T> GetQuery(IQueryable<T> query, params Expression<Func<T, object?>>[]? includeProperties)
        {{tab}}{
        {{tab}}{{tab}}if (includeProperties != null)
        {{tab}}{{tab}}{{tab}}foreach (var includeProperty in includeProperties)
        {{tab}}{{tab}}{{tab}}{{tab}}query = query.Include(includeProperty);
        {{tab}}{{tab}}
        {{tab}}{{tab}}return query;
        {{tab}}}

        {{tab}}private string GetKeyPropertyName()
        {{tab}}{
        {{tab}}{{tab}}var keyProperty = typeof(T).GetProperties()
        {{tab}}{{tab}}{{tab}}.FirstOrDefault(prop => Attribute.IsDefined(prop, typeof(KeyAttribute)));
        {{tab}}{{tab}}
        {{tab}}{{tab}}if (keyProperty == null)
        {{tab}}{{tab}}{{tab}}throw new InvalidOperationException($"No key property found for type {typeof(T).Name}");
        {{tab}}{{tab}}
        {{tab}}{{tab}}return keyProperty.Name;
        {{tab}}}}

      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/Repositories/Generic/"


    - fileType: "Generic file"
      fileName: "IService"
      extension: "cs"
      content: |
        namespace ${majStart(projectName)}.Services.Generic;
        
        using System.Linq.Expressions;
        
        public interface IService<T, in TKey> where T : class
        {
        {{tab}}Task<IEnumerable<T>> GetAllAsync(params Expression<Func<T, object?>>[]? includeProperties);
        {{tab}}Task<T?> GetByIdAsync(long id, params Expression<Func<T, object?>>[]? includeProperties);
        {{tab}}Task AddAsync(T entity);
        {{tab}}Task UpdateAsync(T entity);
        {{tab}}Task DeleteAsync(TKey id);
        {{tab}}Task<bool> ExistsAsync(TKey id);
        }
      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/Services/Generic/"

  projectFiles:
    - fileType: "appSettingsDeveloppement"
      fileName: "appsettings.Development.json"
      sourcePath: "data_genesis/csharp/"
      destinationPath: "${destinationFolder}/${majStart(projectName)}/${majStart(projectName)}/"

  projectFolders: [ ]